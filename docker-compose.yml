version: '3.3'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181"
    hostname: zookeeper
    #networks:
    #  - my-network
    volumes:
      - /home/azureuser/zookeeper/data:/opt/zookeeper-3.4.13/data
  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1" # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: acit3855-kafla.eastus2.cloudapp.azure.com # docker-machine ip
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://acit3855-kafla.eastus2.cloudapp.azure.com:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_DIRS: ../../kafka/kafka-logs
      KAFKA_BROKER_ID: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/azureuser/kafka:/kafka/kafka-logs
    depends_on:
      - "zookeeper"
        #networks:
        #- my-network
  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'events'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'Password'
      MYSQL_ROOT_PASSWORD: 'Password'
    ports:
      - '3306:3306'
    expose:
      - '3306'
    volumes:
      - my-db:/var/lib/mysql
        #networks:
        #- my-network
  receiver:
    image: receiver
    #container_name: my-receiver
    ports:
      - "8080"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/receiver:/config
      - /home/azureuser/logs:/logs
    depends_on: 
      - kafka
    networks:
      - api.network
  storage:
    image: storage
    #container_name: storage
    ports:
      - "8090"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/storage:/config
      - /home/azureuser/logs:/logs
    depends_on:
      - kafka
      - db
    networks:
      - api.network
  processing:
    image: processing
    #container_name: my-processor
    ports:
      - "8100"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/processing:/config
      - /home/azureuser/logs:/logs
      - processing-db:/data
        #network_mode: "host"
    depends_on:
      - storage
    networks:
      - api.network
  audit:
    image: audit_log
    #container_name: my-aduitor
    ports:
      - "8110"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/audit_log:/config
      - /home/azureuser/logs:/logs
    depends_on:
      - kafka
    networks:
      - api.network
  dashboard:
    build: ./dashboard
    ports:
      - "8888"
    depends_on:
      - processing
      - audit
    networks:
      - api.network
  nginx:
    image: nginx:latest
    volumes:
      - /home/azureuser/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    # It will start up the nginx only when all api containers have started
    depends_on:
      - receiver
      - storage
      - processing
      - audit
      - dashboard
    ports:
      - "80:80"
    networks:
      - api.network 
      
networks:
  api.network:

# Names our volume
volumes:
  my-db:
  processing-db:


